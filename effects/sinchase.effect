// Sine wave chase effect
init:
  meta[1] = random8(255); // Random hue
  // Number of repetitions (complete loops around color wheel);
  // any more than 4 per meter just looks too chaotic.
  // Store as distance around complete belt
  meta[2] = (1 + random16(4 * ((numPixels + 31) / 32))) * 256;
  // Frame-to-frame increment (speed) -- may be positive or negative,
  // but magnitude shouldn't be so small as to be boring.  It's generally
  // still less than a full pixel per frame, making motion very smooth.
  meta[3] = 4 + random16(meta[1]) / numPixels;
  // Reverse direction half the time.
  if(random8(2) == 0) meta[3] = -meta[3];
  meta[4] = 0; // Current position
pixel:
  int foo;
  foo = sin8(meta[4] + meta[2] * i / numPixels) - 127;
  // Peaks of sine wave are white, troughs are black, mid-range
  // values are pure hue (100% saturated).
  *pixel = (foo >= 0) ?
     CHSV(meta[1], 254 - (foo * 2), 255) :
     CHSV(meta[1], 255, 254 + foo * 2);
step:
  meta[4] += meta[3];

// vi:syntax=cpp
